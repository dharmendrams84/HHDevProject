<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:batch="http://www.springframework.org/schema/batch" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://drools.org/schema/drools-spring http://drools.org/schema/drools-spring.xsd">

    <bean id="report" class="com.homehardware.model.ItemDynAttr" scope="prototype" />
    
	<batch:job id="reportJob">
		<batch:step id="step1">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="mysqlItemWriter"
					commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>
	<camelContext id="camelContextBean" trace="true"  
		xmlns="http://camel.apache.org/schema/spring" >
		 <camel:route id="processReportData" >
			<camel:from uri="file://E:/HOMEHARDWARE/Files/CamelFiles/?noop=false"/>
			<camel:unmarshal ref="bindyDataformat">
				<camel:bindy type="Csv" classType="com.hh.model.dao.HhProductAttrDAO"/>
			</camel:unmarshal>
		  <camel:log message="Camel unmarshlling is completed" loggingLevel="INFO" />
		   <camel:process ref="hhProductRecordProcessor"/> 
		   <camel:log message="Processing of reports record is complete" loggingLevel="INFO" />
	  	</camel:route>
  </camelContext>  
   <bean id="hhProductRecordProcessor" class="com.hh.report.processor.HhProductProcessor" />

	<!-- <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		Read a csv file
		<property name="resource" value="classpath:cvs/report22.csv" />
		

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">

				split it
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="item, dynAttrDesc" /> 

					</bean>
				</property>

				<property name="fieldSetMapper">
				    
				    return back to reader, rather than a mapped object.
				    
				    	<bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
				   
				      
					map to an object
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
					
				</property>

			</bean>
		</property>

	</bean> -->

	<bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into item_dyn_attr(ITEM, DYN_ATTR_DESC) values (:item, :dynAttrDesc)            	
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>
